#pragma kernel LocalPrefixSum
#pragma kernel GlobalPrefixSum
#pragma kernel RadixReorder

StructuredBuffer<uint> KeysIn;
RWStructuredBuffer<uint4> BucketsOut;
RWStructuredBuffer<uint4> GlobalDigitPrefixSumOut;
RWStructuredBuffer<uint4> GlobalPrefixSumOut;

RWStructuredBuffer<uint> KeysOut;
StructuredBuffer<uint4> BucketsIn;
StructuredBuffer<uint4> GlobalDigitPrefixSumIn;
StructuredBuffer<uint4> GlobalPrefixSumIn;

StructuredBuffer<float3> _Points;

struct DepthAndValueScans {
	uint depth;
	uint valueScan;
};

RWStructuredBuffer<DepthAndValueScans> DepthValueScanOut;
StructuredBuffer<DepthAndValueScans> DepthValueScanIn;

#define INTRA_WARP_SCAN

#define WARP_SIZE 16
#define GROUP_SIZE 256

#if WARP_SIZE == 64
#define WARP_SHIFT 6   // == log2(64)
#elif WARP_SIZE == 32
#define WARP_SHIFT 5   // == log2(32)
#elif WARP_SIZE == 16                  //optimal for adreno 510
#define WARP_SHIFT 4   // == log2(16)
#endif

groupshared uint4 temp[GROUP_SIZE];

int bitshift;
float4x4 model;
float3 camPos;
float scaledMaxDistance;
float3 objectWorldPos;
float depthIndices;

//source for intra warp scan: 
//http://research.nvidia.com/sites/default/files/publications/nvr-2008-003.pdf



uint4 ScanWarp(uint index, uint lane)
{
	if (lane >= 1)
		temp[index] = temp[index - 1] + temp[index];
	if (lane >= 2)
		temp[index] = temp[index - 2] + temp[index];
	if (lane >= 4)
		temp[index] = temp[index - 4] + temp[index];
	if (lane >= 8)
		temp[index] = temp[index - 8] + temp[index];
#if WARP_SIZE >= 32
	if (lane >= 16)
		temp[index] = temp[index - 16] + temp[index];
#endif
#if WARP_SIZE >= 64
	if (lane >= 32)
		temp[index] = temp[index - 32] + temp[index];
#endif
	return lane > 0 ? temp[index - 1] : uint4(0,0,0,0); //0;
}

uint4 ScanWarpInclusive(uint index, uint lane)
{
	if (lane >= 1)
		temp[index] = temp[index - 1] + temp[index];
	if (lane >= 2)
		temp[index] = temp[index - 2] + temp[index];
	if (lane >= 4)
		temp[index] = temp[index - 4] + temp[index];
	if (lane >= 8)
		temp[index] = temp[index - 8] + temp[index];
#if WARP_SIZE >= 32
	if (lane >= 16)
		temp[index] = temp[index - 16] + temp[index];
#endif
#if WARP_SIZE >= 64
	if (lane >= 32)
		temp[index] = temp[index - 32] + temp[index];
#endif
	return temp[index];
}

uint4 ScanGroup(uint index)
{
	uint lane = index & (WARP_SIZE - 1); // index of thread in warp (0..31)
	uint warpId = index >> WARP_SHIFT;

	// Step 1: Intra-warp scan in each warp
	uint4 val = ScanWarpInclusive(index, lane);
	GroupMemoryBarrierWithGroupSync();

	// Step 2: Collect per-warp partial results
	if (lane == (WARP_SIZE - 1))
		temp[warpId] = temp[index];
	GroupMemoryBarrierWithGroupSync();

	// Step 3: Use 1st warp to scan per-warp results
	if (warpId == 0)
		ScanWarpInclusive(index, lane);
	GroupMemoryBarrierWithGroupSync();

	// Step 4: Accumulate results from Steps 1 and 3
	if (warpId > 0)
		val = val + temp[warpId - 1];
	GroupMemoryBarrierWithGroupSync();

	// Step 5: Write and return the final result
	temp[index] = val;
	GroupMemoryBarrierWithGroupSync();

	return val;
}

[numthreads(GROUP_SIZE, 1, 1)]
void LocalPrefixSum(uint3 DTid : SV_DispatchThreadID, uint3 groupId : SV_GroupID, uint GI : SV_GroupIndex)
{	
	uint4 indices;
	indices.x = DTid.x * 4u;
	indices.yzw = uint3(indices.x + 1u, indices.x + 2u, indices.x + 3u);

	uint key0 = KeysIn[indices.x];  //indexAndColor
	uint key1 = KeysIn[indices.y];  //indexAndColor
	uint key2 = KeysIn[indices.z];  //indexAndColor
	uint key3 = KeysIn[indices.w];  //indexAndColor

	float4 transVert0 = mul(model, float4(-_Points[key0 >> 8], 1.0));
	float4 transVert1 = mul(model, float4(-_Points[key1 >> 8], 1.0));
	float4 transVert2 = mul(model, float4(-_Points[key2 >> 8], 1.0));
	float4 transVert3 = mul(model, float4(-_Points[key3 >> 8], 1.0));

	float depth0 = dot(transVert0.xyz - objectWorldPos, camPos);
	float depth1 = dot(transVert1.xyz - objectWorldPos, camPos);
	float depth2 = dot(transVert2.xyz - objectWorldPos, camPos);
	float depth3 = dot(transVert3.xyz - objectWorldPos, camPos);

	float4 relativeDepth = (float4(depth0, depth1, depth2, depth3) + scaledMaxDistance) / (scaledMaxDistance + scaledMaxDistance);
	uint4 intDepth = uint4(relativeDepth * depthIndices);

	uint4 keyBits = 3u - ((intDepth >> bitshift) & 0x3);  // we invert the 0-15 to 15-0 to get a reverse sort

	uint4 miniBlock0 = uint4(keyBits.xxxx == uint4(0u, 1u, 2u, 3u));
	uint4 miniBlock1 = uint4(keyBits.yyyy == uint4(0u, 1u, 2u, 3u));
	uint4 miniBlock2 = uint4(keyBits.zzzz == uint4(0u, 1u, 2u, 3u));
	uint4 miniBlock3 = uint4(keyBits.wwww == uint4(0u, 1u, 2u, 3u));

	miniBlock1 += miniBlock0;
	miniBlock2 += miniBlock1;
	miniBlock3 += miniBlock2;

	temp[GI] = miniBlock3;					 
	GroupMemoryBarrierWithGroupSync();

#if defined(INTRA_WARP_SCAN)
	uint4 result = ScanGroup(GI);			//counts of 0u, 1u, 2u, 3u
#else
	uint4 result;
	{
		[unroll(int(log2(GROUP_SIZE)))]
		for (uint i = 0u; i < uint(log2(GROUP_SIZE)); i++) {		//log2(256) == 8
			result = temp[GI];

			uint sumOffset = 1 << i;
			if (GI >= sumOffset) { //step0: ignore first elem, step1: ignore first 2 elems, step1: ignore first 4 elems, etc.
				result += temp[GI - sumOffset];
			}
			GroupMemoryBarrierWithGroupSync();
			temp[GI] = result;
			GroupMemoryBarrierWithGroupSync();
		}
	}
#endif

	if (GI > 0) {
		uint4 prevSubBlockFinalSum = temp[GI-1];
		miniBlock0 += prevSubBlockFinalSum;
		miniBlock1 += prevSubBlockFinalSum;
		miniBlock2 += prevSubBlockFinalSum;
	}

	DepthValueScanOut[indices.x].depth = keyBits.x;
	DepthValueScanOut[indices.x].valueScan = miniBlock0[keyBits.x];
	DepthValueScanOut[indices.y].depth = keyBits.y;
	DepthValueScanOut[indices.y].valueScan = miniBlock1[keyBits.y];
	DepthValueScanOut[indices.z].depth = keyBits.z;
	DepthValueScanOut[indices.z].valueScan = miniBlock2[keyBits.z];
	DepthValueScanOut[indices.w].depth = keyBits.w;
	DepthValueScanOut[indices.w].valueScan = result[keyBits.w];

	//DepthValueScanOut[index].depth = keyBits;
	//DepthValueScanOut[index].valueScan = result[keyBits];

	//Final counts for each block:
	if (GI == (GROUP_SIZE - 1u)) {
		BucketsOut[groupId.x] = result;   //here it should use only the last result (the sum of the 4 elements)
	}
	
}

[numthreads(GROUP_SIZE, 1, 1)]
void GlobalPrefixSum(uint3 DTid : SV_DispatchThreadID, uint3 groupId : SV_GroupID, uint GI : SV_GroupIndex)
{
	temp[GI] = BucketsIn[GI];
	GroupMemoryBarrierWithGroupSync();

#if defined(INTRA_WARP_SCAN)
	uint4 result = ScanGroup(GI);
#else
	uint4 result;
	{
		[unroll(int(log2(GROUP_SIZE)))]
		for (uint i = 0u; i < uint(log2(GROUP_SIZE)); i++) {		//log2(256) == 8
			result = temp[GI];

			uint sumOffset = 1 << i;
			if (GI >= sumOffset) { //step0: ignore first elem, step1: ignore first 2 elems, step1: ignore first 4 elems, etc.
				result += temp[GI - sumOffset];
			}
			GroupMemoryBarrierWithGroupSync();
			temp[GI] = result;
			GroupMemoryBarrierWithGroupSync();
		}
	}
#endif

	GlobalPrefixSumOut[GI] = result;

	if (GI == (GROUP_SIZE - 1u)) {
		//Here we scan the counts of the 16 values, in order to get their base indices.

		//exclusive scan:
		uint4 prefixSums;
		prefixSums.x = 0u;
		prefixSums.y = prefixSums.x + result.x;
		prefixSums.z = prefixSums.y + result.y;
		prefixSums.w = prefixSums.z + result.z;

		GlobalDigitPrefixSumOut[0] = prefixSums;
	}
}

[numthreads(GROUP_SIZE, 1, 1)]
void RadixReorder(uint3 groupThreadId : SV_GroupThreadID, uint3 DTid : SV_DispatchThreadID, uint3 groupId : SV_GroupID, uint GI : SV_GroupIndex)
{
	[unroll(4)]
	for (uint i = 0; i < 4u; i++) {
		uint index = DTid.x * 4u + i;
		DepthAndValueScans depthValueScans = DepthValueScanIn[index];
		uint keyBits = depthValueScans.depth;
		uint localOffset = depthValueScans.valueScan; //ValueScans, every 16th value is a partial prefix sum of the same value.

		//Correct the ValueScans according to the Global offset:
		if (groupId.x > 0) {
			uint4 prevBlockFinalSum = GlobalPrefixSumIn[groupId.x - 1]; //this gives a new sum for each increase in GI. While we want the same for this group, right?
			uint prevSum0 = prevBlockFinalSum[keyBits];
			localOffset += prevSum0;
		}

		uint key = KeysIn[index];  //indexAndColor
		uint globalOffset = GlobalDigitPrefixSumIn[0][keyBits];

		uint newIndex = globalOffset + localOffset - 1u;

		//Very uncoalesced writes...
		KeysOut[newIndex] = key;
	}
}








